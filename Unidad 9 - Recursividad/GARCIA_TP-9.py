#EJERCICIO 1 
#Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. 
# Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial
#  de todos los n√∫meros enteros entre 1  y el n√∫mero que indique el usuario

#Definici√≥n de Funciones 

def factorial(numero):
    """Calcula recursivamente el factorial de un n√∫mero entero no negativo."""
    #Caso base: el factorial de 0 es 1
    if numero == 0:
        return 1
    else:
        return numero * factorial(numero-1)
    
#Programa principal

#Solicitamos que el usuario ingrese el n√∫mero para calcular su factorial y lo mostramos
numero = int(input("Ingrese un n√∫mero para calcular su factorial: "))

print(f"El factorial {numero} es : {factorial(numero)}")

#---------------------------------------------------------------------------------------
#EJERCICIO 2
#Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

#Definici√≥n de Funciones 
def fibonacci(posicion):
    """Calcula recursivamente el valor correspondiente a una posici√≥n de la serie de Fibonacci."""
    # Caso base: las dos primeras posiciones valen 0 y 1 respectivamente
    if posicion == 0:
        return 0
    elif posicion == 1:
        return 1
    else:
        return fibonacci(posicion -1) + fibonacci (posicion -2)
    
#Programa principal
# Solicitamos al usuario la posici√≥n hasta la cual desea obtener la serie
posicion = int(input("Ingrese una posici√≥n: "))
# Mostramos la serie completa desde 0 hasta la posici√≥n indicada
for i in range (posicion + 1):
    print(f"En la posici√≥n {i} obtenemos el {fibonacci(i)}")

#---------------------------------------------------------------------------------------
#EJERCICIO 3
#Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
# utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

#Definici√≥n de Funciones 
def potencia (base, exponente):
    """Calcula recursivamente la potencia de un n√∫mero base elevado a un exponente."""
    # Caso base: cualquier n√∫mero elevado a 0 es 1
    if exponente == 0 :
        return 1
    else:
        return base * potencia(base, exponente -1)

#Programa principal

# Solicitamos al usuario la base y el exponente
base = int (input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))
# Calculamos la potencia utilizando la funci√≥n recursiva
resultado = potencia (base, exponente)
# Mostramos el resultado en pantalla
print(f"El resultado de la potencia de {base} elevando al exponente {exponente} es : {resultado}")

#---------------------------------------------------------------------------------------
#EJERCICIO 4
#Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal
#  y devuelva su representaci√≥n en binario como una cadena de texto.

#Definici√≥n de Funciones 
def es_binario (numero):
    """Convierte un n√∫mero decimal positivo a su representaci√≥n binaria mediante recursi√≥n."""
    # Caso base: cuando el n√∫mero llega a 0, se detiene la recursi√≥n
    if numero == 0:
        return ""
    else:
        return es_binario(numero//2)+ str(numero % 2)

#Programa principal
# Solicitamos al usuario que ingrese un n√∫mero para convertirlo a binario
numero = int(input("Por favor ingrese el n√∫mero para su conversi√≥n: "))
# Si el n√∫mero ingresado es 0, lo mostramos directamente
if numero == 0:
    print ("El n√∫mero binario es 0")
else:
    # Mostramos la conversi√≥n del n√∫mero decimal a binario
    print(f"El n√∫mero {numero} en biario es: {es_binario(numero)}")

#---------------------------------------------------------------------------------------
#EJERCICIO 5
#Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de 
# texto sin espacios ni tildes,y devuelva True si es un pal√≠ndromo o False si no lo es.

#Definici√≥n de funciones:

def texto_solo (texto):
    """Convierte el texto a min√∫sculas y elimina los espacios."""
    texto = texto.lower()
    texto= texto.replace(" ", "")
    return texto

def es_palindromo(palabra):
    """Verifica recursivamente si una palabra o frase es un pal√≠ndromo."""
    palabra = texto_solo (palabra)
    #caso base: Si la palabra tiene 0 o 1 letra es palindromo
    if len(palabra)< 1 :
        return True
    #Comparamos primera y √∫ltima letra
    if palabra[0] == palabra [-1]:
        # Llamada recursiva con la palabra sin la primera y √∫ltima letra
        return es_palindromo (palabra [1:-1])
    else:
        return False

#Programa principal
# Solicitamos al usuario que ingrese una palabra o frase sin tildes
frase = input("Ingrese una frase sin t√≠ldes: ")
# Mostramos el resultado de la verificaci√≥n
print(f"La frase/palabra {frase} es pal√≠ndromo?: {es_palindromo (frase)}")


#---------------------------------------------------------------------------------------
#EJERCICIO 6
#Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo 
# y devuelva la suma de todos sus d√≠gitos.

#Definici√≥n de Funciones
def sumar_digitos(n):
    """Calcula recursivamente la suma de los d√≠gitos de un n√∫mero entero positivo."""
    # Caso base: si el n√∫mero tiene un solo d√≠gito, se devuelve ese mismo n√∫mero
    if n < 10:
        return n 
    else:
        return (n % 10) + sumar_digitos(n // 10)

#Programa principal
# Solicitamos al usuario que ingrese un n√∫mero entero positivo
numero = int (input("Por favor ingrese un n√∫mero para sumar sus d√≠gitos: "))
# Mostramos el resultado
print (f"La suma de los d√≠gitos del n√∫mero {numero} es: {sumar_digitos(numero)}")

#---------------------------------------------------------------------------------------
#EJERCICIO 7
# Un ni√±o est√° construyendo una pir√°mide con bloques. }
# En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1),
#  y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo 
# y devuelva el total de bloques que necesita para construir toda la pir√°mide.

#Definici√≥n de funciones

def contar_bloques(n):
    """Calcula recursivamente el total de bloques necesarios para construir una pir√°mide de n niveles."""
    # Caso base: si no hay bloques en el nivel, el total es 0
    if n == 0:
        return 0
    else:
        return n + contar_bloques(n-1)

#Programa principal
# Solicitamos al usuario la cantidad de bloques en el nivel m√°s bajo
bloques = int(input("Por favor ingrese la cantidad de bloques que hay en el nivel m√°s bajo: "))
# Mostramos el total de bloques necesarios para construir la pir√°mide
print(f"La cantidad de bloques que se necesita son : {contar_bloques (bloques)}")

#---------------------------------------------------------------------------------------
#EJERCICIO 8
# #Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) 
# y un d√≠gito (entre 0 y 9),  y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

#Definici√≥n de funciones

def contar_digito(numero, digito):
    """Cuenta recursivamente cu√°ntas veces aparece un d√≠gito dentro de un n√∫mero entero positivo."""
    # Caso base: si el n√∫mero tiene un solo d√≠gito
    if numero == 0:
        return 0
    
    # Si el √∫ltimo d√≠gito coincide con el buscado, sumamos 1
    if numero % 10 == digito:
        return 1 + contar_digito (numero // 10, digito)
    else:
        return contar_digito (numero // 10, digito)
    
# Programa principal
# Solicitamos al usuario el n√∫mero y el d√≠gito a buscar
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese un d√≠gito (0-9) para contar: "))
# Mostramos el resultado
print(f"El d√≠gito {digito} aparece {contar_digito(numero, digito)} veces en {numero}.")